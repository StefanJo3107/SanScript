use strum_macros::{EnumCount as EnumCountMacro, EnumIter, Display};
use strum::IntoEnumIterator;

#[derive(PartialEq, Clone, Display, Debug, EnumCountMacro, EnumIter)]
#[strum(serialize_all = "SCREAMING_SNAKE_CASE")]
pub enum TokenType {
    //single character tokens
    LeftParen,
    RightParen,
    LeftBrace,
    RightBrace,
    Comma,
    Dot,
    Minus,
    Plus,
    Semicolon,
    Slash,
    Star,

    //one or two character tokens
    Bang,
    BangEqual,
    Equal,
    EqualEqual,
    Greater,
    GreaterEqual,
    Less,
    LessEqual,

    //literals
    Identifier,
    String,
    Number,

    //keywords
    And,
    Else,
    False,
    For,
    Fn,
    If,
    Key,
    Loop,
    Match,
    Nil,
    Or,
    Print,
    Return,
    True,
    Let,
    While,

    HidKey,
    // HidKeyA,
    // HidKeyB,
    // HidKeyC,
    // HidKeyD,
    // HidKeyE,
    // HidKeyF,
    // HidKeyG,
    // HidKeyH,
    // HidKeyI,
    // HidKeyJ,
    // HidKeyK,
    // HidKeyL,
    // HidKeyM,
    // HidKeyN,
    // HidKeyO,
    // HidKeyP,
    // HidKeyQ,
    // HidKeyR,
    // HidKeyS,
    // HidKeyT,
    // HidKeyU,
    // HidKeyV,
    // HidKeyW,
    // HidKeyX,
    // HidKeyY,
    // HidKeyZ,
    // HidKey1,
    // HidKey2,
    // HidKey3,
    // HidKey4,
    // HidKey5,
    // HidKey6,
    // HidKey7,
    // HidKey8,
    // HidKey9,
    // HidKey0,
    // HidKeyEnter,
    // HidKeyEscape,
    // HidKeyBackspace,
    // HidKeyTab,
    // HidKeySpace,
    // HidKeyMinus,
    // HidKeyEqual,
    // HidKeyBracketLeft,
    // HidKeyBracketRight,
    // HidKeyBackslash,
    // HidKeyEurope1,
    // HidKeySemicolon,
    // HidKeyApostrophe,
    // HidKeyGrave,
    // HidKeyComma,
    // HidKeyPeriod,
    // HidKeySlash,
    // HidKeyCapsLock,
    // HidKeyF1,
    // HidKeyF2,
    // HidKeyF3,
    // HidKeyF4,
    // HidKeyF5,
    // HidKeyF6,
    // HidKeyF7,
    // HidKeyF8,
    // HidKeyF9,
    // HidKeyF10,
    // HidKeyF11,
    // HidKeyF12,
    // HidKeyPrintScreen,
    // HidKeyScrollLock,
    // HidKeyPause,
    // HidKeyInsert,
    // HidKeyHome,
    // HidKeyPageUp,
    // HidKeyDelete,
    // HidKeyEnd,
    // HidKeyPageDown,
    // HidKeyArrowRight,
    // HidKeyArrowLeft,
    // HidKeyArrowDown,
    // HidKeyArrowUp,
    // HidKeyNumLock,
    // HidKeyKeypadDivide,
    // HidKeyKeypadMultiply,
    // HidKeyKeypadSubtract,
    // HidKeyKeypadAdd,
    // HidKeyKeypadEnter,
    // HidKeyKeypad1,
    // HidKeyKeypad2,
    // HidKeyKeypad3,
    // HidKeyKeypad4,
    // HidKeyKeypad5,
    // HidKeyKeypad6,
    // HidKeyKeypad7,
    // HidKeyKeypad8,
    // HidKeyKeypad9,
    // HidKeyKeypad0,
    // HidKeyKeypadDecimal,
    // HidKeyEurope2,
    // HidKeyApplication,
    // HidKeyPower,
    // HidKeyKeypadEqual,
    // HidKeyF13,
    // HidKeyF14,
    // HidKeyF15,
    // HidKeyF16,
    // HidKeyF17,
    // HidKeyF18,
    // HidKeyF19,
    // HidKeyF20,
    // HidKeyF21,
    // HidKeyF22,
    // HidKeyF23,
    // HidKeyF24,
    // HidKeyExecute,
    // HidKeyHelp,
    // HidKeyMenu,
    // HidKeySelect,
    // HidKeyStop,
    // HidKeyAgain,
    // HidKeyUndo,
    // HidKeyCut,
    // HidKeyCopy,
    // HidKeyPaste,
    // HidKeyFind,
    // HidKeyMute,
    // HidKeyVolumeUp,
    // HidKeyVolumeDown,
    // HidKeyLockingCapsLock,
    // HidKeyLockingNumLock,
    // HidKeyLockingScrollLock,
    // HidKeyKeypadComma,
    // HidKeyKeypadEqualSign,
    // HidKeyKanji1,
    // HidKeyKanji2,
    // HidKeyKanji3,
    // HidKeyKanji4,
    // HidKeyKanji5,
    // HidKeyKanji6,
    // HidKeyKanji7,
    // HidKeyKanji8,
    // HidKeyKanji9,
    // HidKeyLang1,
    // HidKeyLang2,
    // HidKeyLang3,
    // HidKeyLang4,
    // HidKeyLang5,
    // HidKeyLang6,
    // HidKeyLang7,
    // HidKeyLang8,
    // HidKeyLang9,
    // HidKeyAlternateErase,
    // HidKeySysreqAttention,
    // HidKeyCancel,
    // HidKeyClear,
    // HidKeyPrior,
    // HidKeyReturn,
    // HidKeySeparator,
    // HidKeyOut,
    // HidKeyOper,
    // HidKeyClearAgain,
    // HidKeyCrselProps,
    // HidKeyExsel,
    // HidKeyControlLeft,
    // HidKeyShiftLeft,
    // HidKeyAltLeft,
    // HidKeyGuiLeft,
    // HidKeyControlRight,
    // HidKeyShiftRight,
    // HidKeyAltRight,
    // HidKeyGuiRight,


    //misc
    Error(String),
    EOF,
}

impl Into<usize> for TokenType {
    fn into(self) -> usize {
        let mut value = 1;
        for token in TokenType::iter() {
            if self == token {
                return value
            }
            value += 1;
        }

        return 0
    }
}

#[derive(Clone, Debug)]
pub struct Token {
    pub token_type: TokenType,
    pub start_index: usize,
    pub length: usize,
    pub line: usize,
}

impl Token {
    pub fn new(token_type: TokenType, start_index: usize, length: usize, line: usize) -> Token {
        Token {
            token_type,
            start_index,
            length,
            line,
        }
    }

    pub fn get_token_string(&self, source: &str) -> String {
        source[self.start_index..self.start_index + self.length].to_string()
    }
}